{
  
    
        "post0": {
            "title": "Machine learning compilation of quantum circuits",
            "content": "Introduction . I am going to review a recent preprint by Liam Madden and Andrea Simonetto that uses techniques from machine learning to tackle the problem of quantum circuits compilation. I find the approach suggested in the paper very interesting and the preliminary results quite promising. . What is compilation? . Note that a variety of terms are floating around the literature and used more or less interchangibly. Among those are synthesis, compilation, transpilation and decomposition of quantum circuits. I will not make a distinction and try to stick to compilation. . But first things first, what is a compilation of a quantum circuit? The best motivation and illustration for the problem is the following. Say you need to run a textbook quantum circuit on a real hardware. The real hardware usually allows only for a few basic one and two qubit gates. In contrast, your typical textbook quantum circuit may feature (1) complex many-qubit gates, for example multi-controlled gates and (2) one and two qubit gates which are not supported by the hardware. As a simple example take this 3-qubit Grover&#39;s circuit (from qiskit textbook): . #initialization import matplotlib.pyplot as plt import numpy as np # importing Qiskit from qiskit import IBMQ, Aer, assemble, transpile from qiskit import QuantumCircuit, ClassicalRegister, QuantumRegister from qiskit.providers.ibmq import least_busy # import basic plot tools from qiskit.visualization import plot_histogram def initialize_s(qc, qubits): &quot;&quot;&quot;Apply a H-gate to &#39;qubits&#39; in qc&quot;&quot;&quot; for q in qubits: qc.h(q) return qc def diffuser(nqubits): qc = QuantumCircuit(nqubits) # Apply transformation |s&gt; -&gt; |00..0&gt; (H-gates) for qubit in range(nqubits): qc.h(qubit) # Apply transformation |00..0&gt; -&gt; |11..1&gt; (X-gates) for qubit in range(nqubits): qc.x(qubit) # Do multi-controlled-Z gate qc.h(nqubits-1) qc.mct(list(range(nqubits-1)), nqubits-1) # multi-controlled-toffoli qc.h(nqubits-1) # Apply transformation |11..1&gt; -&gt; |00..0&gt; for qubit in range(nqubits): qc.x(qubit) # Apply transformation |00..0&gt; -&gt; |s&gt; for qubit in range(nqubits): qc.h(qubit) # We will return the diffuser as a gate U_s = qc.to_gate() U_s.name = &quot;U$_s$&quot; return U_s qc = QuantumCircuit(3) qc.cz(0, 2) qc.cz(1, 2) oracle_ex3 = qc.to_gate() oracle_ex3.name = &quot;U$_ omega$&quot; n = 3 grover_circuit = QuantumCircuit(n) grover_circuit = initialize_s(grover_circuit, [0,1,2]) grover_circuit.append(oracle_ex3, [0,1,2]) grover_circuit.append(diffuser(n), [0,1,2]) grover_circuit = grover_circuit.decompose() grover_circuit.draw(output=&#39;mpl&#39;) . . The three qubit gates like Toffoli are not generally available on a hardware and one and two qubit gates my be different from those in the textbook algorithm. For example ion quantum computers are good with Mølmer–Sørensen gates and may need several native one qubit gates to implement the Hadamard gate. . Additional important problem is to take into account qubit connectivity. Usually textbook algorithms assume full connectivity, meaning that two-qubit gates can act on any pair of qubits. On most hardware platforms however a qubit can only interact with its neighbors. Assuming that one and two qubits gates available on the hardware can implement a SWAP gate between adjacent qubits, to solve the connectivity problem one can insert as many SWAPs as necessary to connect topologically disjoint qubits. Using SWAPs however leads to a huge overhead in the number of total gates in the compiled circuit, and it is of much importance use them as economically as possible. In fact, the problem of optimal SWAPping alone in generic situation is NP-complete. . Simplified problem . When compiling a quantum circuit one has to decide which resulting circuits are considered to be efficient. Ideally, one should optimize for the total fidelity of the circuit. Let us imagine running the algorithm on a real device. Probably my theorist&#39;s image of a real device is still way too platonic, but I will try my best. Many details need to be taken into account. For example, gates acting on different qubits or pairs of qubits may have different fidelities. Decoherence of qubits with time can make circuits where many operations can be executed in parallel more favorable. Cross-talk (unwanted interactions) between neighboring qubits may lead to exotic patterns for optimal circuits. A simple proxy for the resulting fidelity that is often adopted is the number of two-qubit gates (which are generically much less accurate than a single-qubit gates). So the problem that is often studied, and that is addressed in the preprint we are going to discuss, is the problem of optimal compilation into a gate set consisting of arbitrary single-qubit gates and CNOTs, the only two qubits gate. The compiled circuit must . Respect hardware connectivity. | Have as few CNOTs as possible. | Exceed a given fidelity threshold. | Last item here means that we also allow for an approximate compilation. By increasing the number of CNOTs one can always achieve an exact compilation, but since in reality each additional CNOT comes with its own fidelity cost this might not be a good trade-off. Note also that a specific choice for two-qubit gate is made, a CNOT gate. Any two-qubit gate can be decomposed into at most 3 CNOTs see e.g. here, so in terms of computational complexity this is of course inconsequential. However in the following discussion we will care a lot about constant factors and may wish to revisit this choice at the end. . Existing results . Since finding the exact optimal solution to the compilation problem is intractable, as with many things in life one needs to resort to heuristic methods. A combination of many heuristic methods, in fact. As an example one can check out the transpilation workflow in qiskit. Among others, there is a step that compiles &gt;2 qubit gates into one and two qubit gates; the one that tries to find a good initial placement of the logical qubits onto physical hardware; the one that &#39;routes&#39; the desired circuit to match a given topology being as greedy on SWAPs as possible. Each of these steps can use several different heuristic optimization algorithms, which are continuously refined and extended (for example this recent preprint improves on the default rounting procedure in qiskit). In my opinion it would be waay better to have one unified heuristic for all steps of the process, especially taking into account that they are not completely independent. Although this might be too much to ask for, some advances are definitely possible and machine learning tools might prove very useful. The paper we are going to discuss is an excellent demonstration. . Theoretical lower bound and quantum Shannon decomposition . There is a couple of very nice theoretical results about the compilation problem that I need to mention. But first, let us agree that we will compile unitaries, not circuits. What is the difference? Of course, any quantum circuit (without measurements and neglecting losses) corresponds to a unitary matrix. However, to compute that unitary matrix for a large quantum circuit explicitly is generally an intractable problem, precisely for the same reasons that quantum computation is assumed to be more powerful than classical. Still, taking as the input a unitary matrix (which is in general hard to compute from the circuit) is very useful both theoretically and practically. I will discuss pros and cons of this approach later on. . OK, now the fun fact. Generically, one needs at least this many CNOTs . begin{align} L:= # text{CNOTs} geq frac14 left(4^n-3n-1 right) label{TLB} end{align}to exactly compile an $n$-qubit unitary. &#39;Generically&#39; means that the set of $n$-qubit unitaries that can be compiled exactly with smaller amount of CNOTs has measure zero. Keep in mind though, that there are important unitaries in this class like multi-controlled gates or qubit permutations. We will discuss compilation of some gates from the &#39;measure-zero&#39; later on. . The authors of the preprint (I hope you and me still remember that there is some actual results to discuss, not just my overly long introduction to read) refer to eqref{TLB} as the theoretical lower bound or TLB for short. The proof of this fact is actually rather simple and I will sketch it. A general $d times d$ unitary has $d^2$ real parameters. For $n$ qubits $d=2^n$. Single one-qubit gate has 3 real parameters. Any sequence of one-qubit gates applied to the same qubit can be reduced to a single one-qubit gate and hence can have no more than 3 parameters. That means, that without CNOTs we can only have 3n parameters in our circuit, 3 for each one-qubit gate. This is definitely not enough to describe an arbitrary unitary on $n$ qubits which has $d^2=4^n$ parameters. . Now, adding a single CNOT allows to insert two more 1-qubit unitaries after it, like that . from qiskit.circuit import Parameter a1, a2, a3 = [Parameter(a) for a in [&#39;a1&#39;, &#39;a2&#39;, &#39;a3&#39;]] b1, b2, b3 = [Parameter(b) for b in [&#39;b1&#39;, &#39;b2&#39;, &#39;b3&#39;]] qc = QuantumCircuit(2) qc.cx(0, 1) qc.u(a1, a2, a3, 0) qc.u(b1, b2, b3, 1) qc.draw(output=&#39;mpl&#39;) . . At the first glance this allows to add 6 more parameters. However, each single-qubit unitary can be represented via the Euler angles as a product of only $R_z$ and $R_x$ rotations either as $U=R_z R_x R_z$ or $U=R_x R_y R_z$ (I do not specify angles). Now, CNOT can be represented as $CNOT=|0 rangle langle 0| otimes I+|1 rangle langle 1| otimes X$. It follows that $R_z$ commutes with the control of CNOT and $R_x$ commutes with the target of CNOT, hence they can be dragged to the left and joined with preceding one-qubit gates. So in fact each new CNOT gate allows to add only 4 real parameters: . a1, a2 = [Parameter(a) for a in [&#39;a1&#39;, &#39;a2&#39;]] b1, b2 = [Parameter(b) for b in [&#39;b1&#39;, &#39;b2&#39;]] qc = QuantumCircuit(2) qc.cx(0, 1) qc.rx(a1, 0) qc.rz(a2, 0) qc.rz(b1, 1) qc.rx(b2, 1) qc.draw(output=&#39;mpl&#39;) . . That&#39;s it, there are no more caveats. Thus, the total number of parameters we can get with $L$ CNOTs is $3n+4L$ and we need to describe a $d times d$ unitary which has $4^n$ parameters. In fact, the global phase of the unitary is irrelevant so we only need $3n+4L geq 4^n-1$. Solving for $L$ gives the TLB eqref{TLB}. That&#39;s pretty cool, isn&#39;t it? . Now there is an algorithm, called quantum Shannon decomposition (see ref), which gives an exact compilation of any unitary with the number of CNOTs twice as much as the TLB requires. In complexity-theoretic terms an overall factor of two is of course inessential, but for current NISQ devices we want to get as efficient as possible. Moreover, to my understanding the quantum Shannon decomposition is not easily extendable to restricted topology while inefficient generalizations lead to a much bigger overhead (roughly an order of magnitude). . What&#39;s in the preprint? . Templates . I&#39;ve already wrote an introduction way longer than intended so from now on I will try to be brief and to the point. The authors of the preprint propose two templates inspired by the quantum Shannon decomposition. The building block for each template is a &#39;CNOT unit&#39; . a1, a2 = [Parameter(a) for a in [&#39;a1&#39;, &#39;a2&#39;]] b1, b2 = [Parameter(b) for b in [&#39;b1&#39;, &#39;b2&#39;]] qc = QuantumCircuit(2) qc.cx(0, 1) qc.ry(a1, 0) qc.rz(a2, 0) qc.ry(b1, 1) qc.rx(b2, 1) qc.draw(output=&#39;mpl&#39;) . . First template is called sequ in the paper and is obtained as follows. There are $n(n-1)/2$ different CNOTs on $n$-qubit gates. We enumerate them somehow and simply stack sequentially. Here is a 3-qubut example with two layers (I use qiskit gates cz instead of our &#39;CNOT units&#39; for the ease of graphical representation) . qc = QuantumCircuit(3) for _ in range(2): qc.cz(0, 1) qc.cz(0, 2) qc.cz(1, 2) qc.barrier() qc.draw(output=&#39;mpl&#39;) . . The second template is called spin and for 4 qubits looks as follows . qc = QuantumCircuit(4) for _ in range(2): qc.cz(0, 1) qc.cz(1, 2) qc.cz(2, 3) qc.barrier() qc.draw(output=&#39;mpl&#39;) . . I&#39;m sure you get the idea. That&#39;s it! The templates fix the pattern of CNOTs while angles of single-qubit gates are adjustable parameters which are collectively denoted by $ theta$. . The idea now is simple. Try to optimize these parameters to achieve the highest possible fidelity for a given target unitary to compile. I am not at all an expert on the optimization methods, so I might miss many subtleties, but on the surface the problem looks rather straightforward. You can choose your favorite flavor of the gradient descent and hope for convergence. The problem appears to be non-convex but the gradient descent seems to work well in practice. One technical point that I do not fully understand is that the authors choose to work with fidelity defined by the Frobenius norm $||U-V||_F^2$ which is sensitive to the global phase of each unitary. To my understanding they often find that local minima of this fidelity coincides with the global minimum up to a global phase. OK, so in the rest of the post I refer to the &#39;gradient descent&#39; as the magic numerical method which does good job of finding physically sound minimums. . Results . Compiling random unitaries . OK, finally, for the surprising results. The authors find experimentally that both sequ and spin perform surprisingly well on random unitaries always coming very close to the TLB eqref{TLB} with good fidelity. More precisely, the tests proceed as follows. First, one generates a random unitary. Next, for each number $L$ of CNOTs below the TLB one runs the gradient descent to see how much fidelity can be achieved with this amount of CNOTs. Finally, one plots the fidelity as a function of $L$. Impressively, on the sample of hundred unitaries the fidelity always approaches 100% when the number of CNOTs reaches the TLB. For the $n=3$ qubits TLB is $L=14$, for $n=5$ $L=252$ (these are the two cases studied). So, in all cases studied, the gradient descent lead by the provided templates seems to always find the optimal compilation circuit! Recall that this is two times better than quantum Shannon decomposition. Please see the original paper for nice plots that I do not reproduce here. . Compiling on restricted topology . These tests were performed on the fully connected circuits. The next remarkable discovery is that restricting the connectivity does not to seem to harm the performance of the compilation! More precisely, the authors considered two restricted topologies in the paper, &#39;star&#39; where all qubits are connected to single central one and &#39;line&#39; where well, they are connected by links on a line. The spin template can not be applied to star topology, but it can be applied to line topology. The sequ template can be generalized to any topology by simply omitting CNOTs that are not allowed. Again, as examining a hundred of random unitaries on $n=3$ and $n=5$ qubits shows, the fidelity nearing 100% can be achieved right at the TLB in all cases, which hints that topology restriction may not be a problem in this approach at all! To appreciate the achievement, imagine decomposing each unitary via the quantum Shannon decomposition and then routing on restricted topology with swarms of SWAPs, a terrifying picture indeed. It would be interesting to compare the results against the performance of qiskit transpiler which is unfortunately not done in the paper to my understanding. . Compiling specific &#39;measure zero&#39; gates . Some important multi-qubit gates fall into the &#39;measure zero&#39; set which can be compiled with a smaller amount of CNOTs than is implied by the TLB eqref{TLB}. For example, 4-qubit Toffoli gate can be compiled with 14 CNOTs while the TLB requires 61 gates. Numerical tests show that the plain version of the algorithm presented above does not generically obtain the optimal compilation for special gates. However, with some tweaking and increasing the amount of attempts the authors were able to find optimal decompositions for a number of known gates such as 3- and 4-qubit Toffoli, 3-qubit Fredkin and 1-bit full adder on 4 qubits. The tweaking included randomly changing the orientation of some CNOTs (note that in both sequ and spin the control qubit is always at the top) and running many optimization cycles with random initial conditions. The best performing method appeared to be sequ with random flips of CNOTs. The whole strategy might look a bit fishy, but I would argue that it is not. My argument is simple: you only need to find a good compilation of the 4-qubit Toffoli once. After that you pat yourself on the back and use the result in all your algorithms. So it does not really matter how hard it was to find the compilation as long as you did not forget to write it down. . Compressing the quantum Shannon decomposition . Finally, as a new twist on the plot the authors propose a method to compress the standard quantum Shannon decomposition (which is twice the TLB, remember?). The idea seems simple and works surprisingly well. The algorithm works as follows. . Compile a unitary exactly using the quantum Shannon decomposition. | Promote parameters in single-qubit gates variables (they have fixed values in quantum Shannon decomposition). | Add LASSO-type regularization term, which forces one-qubit gates to have small parameters, ideally zero (which makes the corresponding gates into identities). | Run a gradient descent on the regularized cost function (fidelity+LASSO term). Some one-qubit gates will become identity after that (one might need to tune the regularization parameter here). | After eliminating identity one-qubit gates one can end up in the situation where there is a bunch of CNOTs with no single-qubit gates in between. There are efficient algorithms for reducing the amount of CNOTs in this case. | Recall that the fidelity was compromised by adding regularization terms. Run the gradient descent once more, this time without regularization, to squeeze out these last percents of fidelity. | From the description of this algorithm it does not appear obvious that the required cancellations (elimination of single-qubit gates and cancellations in resulting CNOT clusters) is bound to happen, but the experimental tests show that they do. Again, from a bunch of random unitaries it seems that the $ times 2$ reduction to the TLB is almost sure to happen! Please see the preprint for plots. . Weak spots . Although I find results of the paper largely impressive, a couple of weak spots deserve a mention. . Limited scope of experiments . The numerical experiments were only carried out for $n=3$ and $n=5$ qubits which of course is not much. To see if the method keeps working as the number of qubits is scaled is sure very important. There may be two promblems. First, the templates can fail to be expressive enough for larger circuits. The authors hope to attack this problem from the theoretical side and show that the templates do fill the space of unitaries. Well, best of luck with that! Another potential problem is that although the templates work fine for higher $n$, the learning part might become way more challenging. Well, I guess we should wait and see. . Unitary as the input . As I discussed somewhere way above, for a realistic quantum computation we can not know the unitary matrix that we need to compile. If we did, there would no need in the quantum computer in the first place. I can make two objects here. First, we are still in the NISQ era and pushing the existing quantum computers to their edge is a very important task. Even if an algorithm can be simulated classically, running it on a real device might be invaluable. Second, even quantum circuits on 1000 qubits do not usually feature 100-qubit unitaries. So it could be possible to separate a realistic quantum circuit into pieces, each containing only a few qubits, and compile them separately. . Final remarks . To me, the algorithms presented in the preprint seem to be refreshingly efficient and universal. At some level it appears to be irrelevant which exact template do we use. Near the theoretical lower bound they all perform similarly well, even on restricted topology. This might be a justification for choosing CNOT as the two-qubit gate, as this probably does not matter in the end! I&#39;m really cheering for a universal algorithm like that to win the compilation challenge over a complicated web of isolated heuristics, which are currently state of the art. .",
            "url": "https://idnm.github.io/blog/blog/machine%20learning/compilation/qiskit/paper%20review/2021/07/22/Machine-learning-compilation-of-quantum-circuits.html",
            "relUrl": "/machine%20learning/compilation/qiskit/paper%20review/2021/07/22/Machine-learning-compilation-of-quantum-circuits.html",
            "date": " • Jul 22, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "What is entanglement?",
            "content": "Introduction . I&#39;ve known the formal definition of entanglement for years, but I am only now appreciating many of its profound implications. In this post I would like to share two aspects that put entangled states into sharp contrast with unentangled (separable pure) states and classical random variables. Instead of proofs I provide references and simple experiments in qiskit. . . Entanglement is the failure of states to factorize . So what is entanglement? Entanglement is what entangled states have. What are those? Take two spins. The state . begin{equation} frac1{ sqrt{2}} Big(| uparrow uparrow rangle+| downarrow downarrow rangle Big) label{bell} end{equation}is your canonical example of an entangled stated. In contrast, all the states below are unentangled begin{align} | uparrow uparrow rangle, qquad | downarrow uparrow rangle, qquad frac1{ sqrt{2}}| uparrow rangle Big(| uparrow rangle-| downarrow rangle Big), qquad frac1{ sqrt{2}} Big(| uparrow rangle-| downarrow rangle Big) Big(| uparrow rangle+| downarrow rangle Big) label{unen} end{align} . The difference between eqref{bell} and eqref{unen} is the following. All latter states are actually products of the form $| psi_1 rangle | psi_2 rangle$ where $| psi_1 rangle$ is the state of the first system and $| psi_2 rangle$ of the second. In contrast, state eqref{bell} can not be represented in as a product. It is instead a linear combination of factorized states which is not reducible to a single product. You can define entangled states by this property of not being factorizible into states of consistuent spins. . Now that we know what entangled states are it is perfectly reasonable to ask: &quot;so what?&quot;. Why are entangled states special? I am going to give two angles on this questions, out of many possible. . . Note for the sake of concreteness and simplicity I talk about &quot;spins&quot;. In the context of discrete-variable quantum computation &quot;spin&quot;$ equiv$&quot;qubit&quot;, but I prefer spins, because they come with a useful geometrical intuition. The abstract Bloch sphere associated to a qubit describes an actual orientation of a spin in $3d$ space. . Entangled spin behaves very differently from unentangled . A spin which is not entangled can always be described by a direction $ bf n$ along which it is pointing $| uparrow_{ bf n} rangle$. If one measures the component of the spin along this direction, the result is always $ frac12$. Such a measurement corresponds to a projector $P({ bf n})={ bf n} cdot { bf sigma}=n_x sigma_x+n_y sigma_y+n_z sigma_z$. If state $| uparrow_{ bf n} rangle$ is measured along a different axis $ bf n&#39;$ the result depends on the angle $ theta$ between $ bf n$ and $ bf n&#39;$. With probability $ cos^2 frac theta2$ one gets projection $+ frac12$ and with probability $ sin^2 frac theta2$ one gets $- frac12$. However, for any state of the spin $| psi rangle$ there is an axis $ bf n$, such that measuring the spin along this axis gives $ frac12$ with probability one. . This is also true for any of the unentangled states eqref{unen}. For example, measuring the projection of the first spin in the state $| uparrow uparrow rangle equiv | uparrow_{ bf z} uparrow_{ bf z} rangle$ along $ bf z$ always gives $+ frac12$. As another example, since begin{align} | downarrow_{ bf x} rangle= frac12 Big(| uparrow_{ bf z} rangle-| downarrow_{ bf z} rangle Big) label{xdown} end{align} the state $ frac1{ sqrt{2}} Big(| uparrow rangle-| downarrow rangle Big) Big( uparrow rangle+| downarrow rangle Big)$ always registers $- frac12$ when the projection of the first spin along $ bf x$ axis is measured. . In contrast, for the maximally entangled state eqref{bell} the axis with a definite projection of the first spin does not exist. In fact, for all intents and purposes, if you only look at observables associated with the first qubit, state eqref{bell} behaves as a statistical ensemble of states $| uparrow rangle$ and $| downarrow rangle$, i.e. . begin{align} frac1{ sqrt{2}} Big(| uparrow uparrow rangle+| downarrow downarrow rangle Big) approx cases{| uparrow rangle text{ with probability $ frac12$} | downarrow rangle text{ with probability $ frac12$}} label{bellapprox} end{align}This means, for example, that projection onto $ bf z$ axis of the first spin is completely random: with probability $ frac12$ it behaves as $| uparrow rangle$ and gives projection $+ frac12$, with probability $ frac12$ it behaves as $| downarrow rangle$ and gives projection $- frac12$. This is different from a coherent superposition of the up and down states, such as eqref{xdown}. Although state eqref{xdown} gives random results when measured along $ bf z$, it gives certain results when measured along $ bf x$. There is no such axis for state eqref{bellapprox}. In fact, the spin projection along any axis is completely random. . To prove this fact I would need to go into some details of how one does construct an ensemble from an entangled state. This is not at all difficult but I won&#39;t do it here. I encourage an interested reader to consult John Preskill&#39;s notes (chapter 2.3). . Instead, let me do a quick experimental check using qiskit. A Hadamard gate followed by a CNOT creates our state eqref{bell}: . from qiskit import QuantumCircuit, BasicAer, execute from qiskit.visualization import plot_histogram qc = QuantumCircuit(2, 1) qc.h(0) qc.cx(0, 1) qc.draw(output=&#39;mpl&#39;) . To my knowledge, one can only measure in the computational basis in qiskit, i.e. only along $ bf z$ axis in our terminology. To measure a spin along some axis $ bf n$ we can instead rotate the spin itself, and then measure along $ bf z$ axis. Mathematically, if ${ bf n} = R^{-1} { bf z}$ for some rotation $R$ then $ langle uparrow_{ bf z}|P({ bf n})| uparrow_ rangle= langle uparrow_{R{ bf z}}|P({ bf z})| uparrow_{R{ bf z}} rangle$. . # Feel free to change them and see if the outcome distribution changes. theta, pi, lam = 0.13, 0.89, 0.37 qc.u(theta, pi, lam, 0) # Rotate the qubit. qc.measure(0, 0) # Execute on a simulator and plot a histogram of the result. backend = BasicAer.get_backend(&#39;qasm_simulator&#39;) result = execute(qc, backend, shots=1000).result() counts = result.get_counts(qc) plot_histogram(counts) . The result looks like a fair sample from the uniform probability distribution. This means that projection on the axis we have specified is indeed random. You can try to change the axis and see if you can get a biased distribution (spoiler: you can not). . Entanglement correlations are stronger than classical . First let me note that although we talked about the first spin before, the state eqref{bell} is symmetric and everything equally applies to the second spin. Although the behavior of each of these spins is completely random, there are strong correlations between the them. If we can make local measurements on both spins the state eqref{bell} behaves as . begin{align} frac1{ sqrt{2}} Big(| uparrow uparrow rangle+| downarrow downarrow rangle Big) approx cases{| uparrow uparrow rangle text{ with probability $ frac12$} | downarrow downarrow rangle text{ with probability $ frac12$}} label{bellapprox2} end{align}So for example projections onto $ bf z$ axis of both spins are always the same, although random. Again, this in fact holds for any axis. Here is an experimental verification. . qc = QuantumCircuit(2, 2) qc.h(0) qc.cx(0, 1) # Rotation of each qubit to simulate measurement along arbitary axis. theta, pi, lam = 0.13, 0.89, 0.37 qc.u(theta, pi, lam, 0) qc.u(theta, pi, lam, 1) qc.measure([0, 1], [0, 1]) # Simulate and plot results. backend = BasicAer.get_backend(&#39;qasm_simulator&#39;) result = execute(qc, backend, shots=2000).result() counts = result.get_counts(qc) plot_histogram(counts) . The result I get is almost certainly a uniform distribution of over $00=| uparrow_{ bf n} uparrow_{ bf n} rangle$ and $11=| downarrow_{ bf n} downarrow_{ bf n} rangle$ (you can change $ bf n$ by changing angles in the code), however I also get a tiny number of spurious counts for $01$ and $10$, which is probably a bug, hm. . When seeing this for the first time there is definitely something to contemplate, like say an EPR paradox. Spoiler: it is not possible to use these correlations for superluminal transmission of information, but they are still a valuable resource. I will discuss just one manifestation of these quantum correlations which has a very concrete operational interpretation -- it allows a quantum team to play a certain probabilistic game better than any classical team could! Note that this is also basically Bell&#39;s theorem in disguise. . So here is the setup. Alice and Bob are playing together against Charlie. Charlie sends random uncorrelated bits $x$ to Alice and $y$ to Bob. Admittedly, Charlie&#39;s job is not very creative and nothing in his strategy can be changed. Now, in response to the obtained bits Alice produces her output bit $a$ and Bob his $b$. Team A&amp;B wins if $a oplus b=x land y$ where $ oplus$ is XOR (sum modulo 2) and $ land$ is the logical AND. Explicitly, if $x land y=1$ both Alice and Bob got $x=y=1$ (which happens one quarter of the time) and they win iff they respond $a=0, b=1$ or $a=1, b=0$ so that $a oplus b=1$. For all other inputs from Charlie, i.e. when $(x,y)$ is equal to $(0,0), (1,0)$ or $(0,1)$ the logical sum $x land y=0$ and Alice and Bob win iff $a=0,b=0$ or $a=1, b=1$ so that $a oplus b=0$. . Now, although in the same team, Alice and Bob are not allowed to communicate during the game. But they can discuss their strategy in advance. The best that a classical team can do is to win $75 %$ of the time. To achieve this winning rate it is sufficient to simply output $a=0, b=0$ irrespective of Charlie&#39;s bits $x,y$. This strategy only loses when $x=y=1$, i.e. one quarter of the time. . Now comes the interesting part. If Alice and Bob each have a spin, and these spins are entangled as in state eqref{bell}, they can achieve the winning probability begin{align} P_{win}= frac12+ frac1{2 sqrt{2}} approx 0.85! label{pwin} end{align} So, what should they do? . Define four axes $ bf n_1,n_2,n_3,n_4$ in the $ bf xz$ plane (of course this is just one of the possibilities). Take ${ bf n_1}= (1,0)$, then ${ bf n_2}=( frac1{ sqrt{2}}, frac1{ sqrt{2}})$ is counter-clockwise rotated by $ pi/4$ wrt to $ bf n_1$; ${ bf n_3}=(0,1)$ is rotated by $ pi/2$; and finally ${ bf n_4}=(- frac1{ sqrt{2}}, frac1{ sqrt{2}})$ is rotated by $3 pi/4$. . . Now here is the strategy that Alice and Bob follow begin{align} a(x)= cases{P_{ bf n_3}, qquad x=0 P_{ bf n_1}, qquad x=1} qquad qquad b(y)= cases{P_{ bf n_2}, qquad y=0 P_{ bf n_4}, qquad y=1} label{abcases} end{align} . Where $P_{ bf n}=+1$ if Alice&#39;s (or Bob&#39;s) spin gave projection $+ frac12$ when measured along $ bf n$ and $P_{ bf n}=0$ if the projection was $- frac12$. An example: if Alice recieves $x=0$ and Bob $y=1$ Alice measures her spin along $n_3= bf z$ axis and sends back the result, while Bob measures his spin along $ bf{n_4}$ (which is $3 pi/4$ rotated $ bf x$ axis) and sends his result. . Now, shall we check that this strategy indeed achieves the advertised winning probability eqref{pwin}? Sure, I also thought so! . import numpy as np # Define rotation axes by their angles. theta1 = 0 theta2 = np.pi/4 theta3 = np.pi/2 theta4 = 3*np.pi/4 def charlie(): # Charlies job is to generate two random bits. return np.random.randint(0,1+1, size=(2)) def alice(x): # Alice decides on the measurement axis according to her strategy. if x==0: return theta3 if x==1: return theta1 def bob(x): # Bob does his part of the protocol. if x==0: return theta2 if x==1: return theta4 def one_round(): # First we prepare an entangled state. qc = QuantumCircuit(2, 2) qc.h(0) qc.cx(0, 1) # Now Charlie generates his bits. x, y = charlie() # A&amp;B team makes their move. a_angle = alice(x) b_angle = bob(y) # Again, we can not measure directly along the desired axes, # but must rotate the qubits instead. Rotation in the xz plane is made by `ry` gate. qc.ry(a_angle, 0) # Alice rotates her qubit. qc.ry(b_angle, 1) # Bob his. # Now we add measurments and actually run the circuit. qc.measure([0, 1], [0, 1]) backend = BasicAer.get_backend(&#39;qasm_simulator&#39;) result = execute(qc, backend, shots=1).result() counts = result.get_counts(qc) # Output of counts is a dict like `{&#39;01&#39;: 1}`. This extracts the measurment results: a, b = [int(c) for c in list(counts.keys())[0]] # And now we check, team A&amp;B gogogo! return (a + b) % 2 == x * y . Alright, now let us collect the statistics: num_rounds = 2000 wins = 0 for _ in range(num_rounds): wins += one_round() print (&quot;Win probability:{}&quot;.format(wins/num_rounds)) . Win probability:0.847 . So that&#39;s pretty close to the theoretical value eqref{pwin}. Note that for each round of the game a new entangled pair is needed. . Now that we have seen that the strategy works let us briefly discuss why. I will only give a sketch and refer for details to Preskill&#39;s lectures chap 4.3. . One thing Alice and Bob could do is to always measure along the same axes. Then, their results would be perfectly correlated (i.e. they always output $a=b=0$ or $a=b=1$) which gives 0.75 winning probability, the same as the best deterministic strategy. Now, in one quarter of cases (when $x=y=1$) they are better off outputting anticorrelated results. If we revisit the figure above equation eqref{abcases} we see that the angle between $a(1)$ and $b(1)$ is $3 pi/4$ which indeed gives a negative correlation in this case $ Big( cos frac{3 pi}{4}=- frac{1}{ sqrt{2}} Big)$. The price to pay is that angles between $ Big(a(0),b(0) Big)$, $ Big(a(0),b(1) Big)$ and $ Big(a(1),b(0) Big)$ are now non-zero (and hence correlations are less than 1) which makes this strategy lose in some cases when the deterministic strategy wins. However, as we have seen experimentally the trade-off is still in our favor. It is also possible to prove that our choice of axes gives the maximum possible win probability. This is ultimately bound by Tsirelson&#39;s bound, see below. . Now you might ask -- what if there exists a clever randomized classical strategy which would perform better than deterministic 0.75 using a similar trick? Turns out this is not possible. The proof is based on the following inequality begin{align} Big| langle a_0 b_0 rangle+ langle a_0 b_1 rangle+ langle a_1 b_0 rangle- langle a_1 b_1 rangle Big| leq 2 end{align} which holds for any random variables $a_0, a_1, b_0, b_1$ taking values $ pm1$ and described by a joint probability distribution. This is known as CHSH inequality and a technical proof is trivial. Why quantum correlations do not have to obey the bound? Well, the reason is somewhat deep and quantum and ultimately related to Bohr&#39;s complementarity) -- non-commuting observables can not be simultaneously assigned values. That this statement has quantitative consequences is illustrated by Bell&#39;s theorem or our game. . Tehcnically quantum correlations obey the Tsirelson&#39;s bound begin{align} Big| langle a_0 b_0 rangle+ langle a_0 b_1 rangle+ langle a_1 b_0 rangle- langle a_1 b_1 rangle Big| leq 2 sqrt{2} end{align} which, as you see, is weaker by a factor $ sqrt{2}$, so the correlations themselves can be stronger, although still bounded. . Final remarks . Quantum entanglement is indeed very unusual and consequential. There are many more wonders that it entails, please consult your favorite lecture notes for a non-exhaustive list. My current favorite are John Preskill&#39;s lecture notes. For a non-mathematical although technically very accurate discussion of entanglement see this artice by Frank Wilczek entanglement made simple. . Any questions and suggestions are welcome, as this is my first blog demo. .",
            "url": "https://idnm.github.io/blog/blog/quantum%20concepts/qiskit/2021/07/12/Entanglement.html",
            "relUrl": "/quantum%20concepts/qiskit/2021/07/12/Entanglement.html",
            "date": " • Jul 12, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "How was this blog set up?",
            "content": "Why fastpages? . After deciding to start a scientific blog I was looking for an appropriate technical solution. My main requirements were . Ease of set up. | Ease of writing posts. | Decent support of $ LaTeX$. | Support of code snippets. | . After some search I decided to try out fastpages. I have a very limited understanding of the stack that fastpages use, so I treat it as a magic box. The magic box was easy for me to install while other bullet points are addressed all at once since fastpages allows to generate a post from a jupyter notebook. Although jupyter notebook is not exactly my favorite $ LaTeX$ editor it still much better than many other options and a good overall compromise. So essentially with fastpages you can write your posts in jupyter notebook, then commit to your github repository and the content will automatically be hosted at your domain on github pages. . Caveats . Following official installation worked smoothly for me. While customizing the blog further for my purposes there were several things that did not work right of the box of took some time to find out how to change: . Solved . I wanted to use numbered $ LaTeX$ equations with hyperlinks, which are not easily supported. This comment solved my problem! | You need to edit _pages/about.md to customize the way your &quot;about&quot; page is displayed. | To customize the front page you need to edit index.html. This is literally written on the front page of your blog, but I have not noticed it for a while. | Initially a lot of troubleshooting is needed to get the appearance of the blog I wanted. Commiting and waiting for the online web page to set up is super-slow. Here is an official guide on how to setup a live preview of your blog locally. One minor point that was a problem for me is that the default local server for blog preview https://127.0.0.1:4000 was not correct. After running sudo make server one of the outputs that jekyll produces is Server address: http://0.0.0.0:4000/blog/ which was the correct address for the live preview of my blog. | Not solved . On the web page the display equations of $ LaTeX$ have fluctuations in size which does not look good. |",
            "url": "https://idnm.github.io/blog/blog/fastpages/2021/07/11/How-this-blog-was-set-up.html",
            "relUrl": "/fastpages/2021/07/11/How-this-blog-was-set-up.html",
            "date": " • Jul 11, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": "My name is Nikita Nemkov, I am a theoretical physicist diving into the field of quantum computation. On this blog I consolidate some of my thoughts on the subject, from reviews of the basic concepts to brief reports on the newest research papers. . I do not expect to have many readers and I do not tailor my posts to any particular audience. Perhaps the reader that could benefit from these notes the most is me, before writing them. Yet, if you found anything that I wrote useful give me a quick feedback in the comments or drop an email! .",
          "url": "https://idnm.github.io/blog/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://idnm.github.io/blog/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}